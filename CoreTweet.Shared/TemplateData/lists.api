#namespace Lists
#description Provides a set of methods for the wrapper of GET/POST lists.

endpoint Listed<List> List : Get lists/list
{
	description
	{
		Returns all lists the authenticating or specified user subscribes to, including their own.
		The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.
	}
	returns
	{
		The lists.
	}
	params
	{
		either long user_id
		either string screen_name
		optional bool reverse
	}
}

endpoint Listed<List> List : Get lists/list
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Returns all lists the authenticating or specified user subscribes to, including their own.
		The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.
	}
	returns
	{
		The lists.
	}
	params
	{
		optional bool reverse
	}
}

endpoint Cursored<List> Memberships : Get lists/memberships
{
	description
	{
		Returns the lists the specified user has been added to.
		If user_id or screen_name are not provided the memberships for the authenticating user are returned.
	}
	returns
	{
		The lists.
	}
	params
	{
		either long user_id
		either string screen_name
		optional int count
		optional long cursor
		optional bool filter_to_owned_lists
	}
}

endpoint Cursored<List> Memberships : Get lists/memberships
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Returns the lists the specified user has been added to.
		If user_id or screen_name are not provided the memberships for the authenticating user are returned.
	}
	returns
	{
		The lists.
	}
	params
	{
		optional int count
		optional long cursor
		optional bool filter_to_owned_lists
	}
}

endpoint Cursored<List> Ownerships : Get lists/ownerships
{
	description
	{
		Returns the lists owned by the specified Twitter user.
		Private lists will only be shown if the authenticated user is also the owner of the lists.
	}
	returns
	{
		The lists.
	}
	params
	{
		either long user_id
		either string screen_name
		optional int count
		optional long cursor
	}
}

endpoint Cursored<List> Ownerships : Get lists/ownerships
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Returns the lists owned by the specified Twitter user.
		Private lists will only be shown if the authenticated user is also the owner of the lists.
	}
	returns
	{
		The lists.
	}
	params
	{
		optional int count
		optional long cursor
	}
}

endpoint ListResponse Show : Get lists/show
{
	description
	{
		Returns the specified list.
		Private lists will only be shown if the authenticated user owns the specified list.
	}
	returns
	{
		The list.
	}
	params
	{
		required long list_id
	}
}

endpoint ListResponse Show : Get lists/show
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Returns the specified list.
		Private lists will only be shown if the authenticated user owns the specified list.
	}
	returns
	{
		The list.
	}
	params
	{
		required string slug
		either string owner_screen_name
		either long owner_id
	}
}

endpoint Cursored<List> Subscriptions : Get lists/subscriptions
{
	description
	{
		Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user’s own lists.
	}
	returns
	{
		The lists.
	}
	params
	{
		either long user_id
		either string screen_name
		optional int count
		optional long cursor
	}
}

endpoint Listed<Status> Statuses : Get lists/statuses
{
	description
	{
		Returns a timeline of tweets authored by members of the specified list.
		Retweets are included by default. Use the <c>include_rts=false</c> parameter to omit retweets.
	}
	returns
	{
		The statuses.
	}
	params
	{
		required long list_id
		optional long since_id
		optional long max_id
		optional int count
		optional bool include_entities
		optional bool include_rts
	}
}

endpoint Listed<Status> Statuses : Get lists/statuses
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Returns a timeline of tweets authored by members of the specified list.
		Retweets are included by default. Use the <c>include_rts=false</c> parameter to omit retweets.
	}
	returns
	{
		The statuses.
	}
	params
	{
		required string slug
		either string owner_screen_name
		either long owner_id
		optional long since_id
		optional long max_id
		optional int count
		optional bool include_entities
		optional bool include_rts
	}
}

endpoint ListResponse Create : Post lists/create
{
	description
	{
		Creates a new list for the authenticated user.
		Note that you can create up to 1000 lists per account.
	}
	returns
	{
		The list.
	}
	params
	{
		required string name
		optional string mode
		optional string description
	}
}

endpoint ListResponse Destroy : Post lists/destroy
{
	description
	{
		Deletes the specified list. The authenticated user must own the list to be able to destroy it.
	}
	returns
	{
		The destroyed list.
	}
	params
	{
		required long list_id
	}
}

endpoint ListResponse Destroy : Post lists/destroy
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Deletes the specified list. The authenticated user must own the list to be able to destroy it.
	}
	returns
	{
		The destroyed list.
	}
	params
	{
		required string slug
		either string owner_screen_name
		either long owner_id
	}
}

endpoint ListResponse Update : Post lists/update
{
	description
	{
		Updates the specified list. The authenticated user must own the list to be able to update it.
	}
	returns
	{
		The list.
	}
	params
	{
		required long list_id
		optional string name
		optional string mode
		optional string description
	}
}

endpoint ListResponse Update : Post lists/update
{
	with
	{
		OmitExcept=static,asyncstatic
	}
	description
	{
		Updates the specified list. The authenticated user must own the list to be able to update it.
	}
	returns
	{
		The list.
	}
	params
	{
		required string slug
		either string owner_screen_name
		either long owner_id
		optional string name
		optional string mode
		optional string description
	}
}
