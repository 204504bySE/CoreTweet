<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="DataType.txt" #>
// The MIT License (MIT)
//
// CoreTweet - A .NET Twitter Library supporting Twitter API 1.1
// Copyright (c) 2014 lambdalice
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using CoreTweet.Core;
using System.IO;
#if !NET35
using System.Threading;
using System.Threading.Tasks;
#endif

namespace CoreTweet.Rest
{

<#
    var ind = new Indent(1);
    var path = Directory.GetParent(this.Host.ResolvePath("RestApis.tt")).FullName;
    var files = Directory.GetFiles(Path.Combine(path, "TemplateData")).Select(x => File.ReadAllText(x));
    var apis = files.Select(x => ApiParent.Parse(x));
    foreach(var i in apis)
    {
        WriteLine(ind + "/// <summary>");
        WriteLine(ind + "/// {0}", i.Description);
        WriteLine(ind + "/// </summary>");
        WriteLine(ind + "public partial class {0} : ApiProviderBase", i.Name);
        WriteLine(ind + "{");
        ind.Inc();
        WriteLine(ind + "internal " + i.Name + " (TokensBase e) : base(e) { }");
        WriteLine("");
        foreach(var j in i.Endpoints)
        {
            if(j is RawLines)
            {
                foreach(var l in (j as RawLines).Lines)
                    WriteLine(ind + l);
                WriteLine("");
                continue;
            }
            WriteLine(ind + "#if !(PCL || WIN_RT || WP)");

            foreach(var m in j.Methods)
            {
                WriteLine(ind + "/// <summary>");
                foreach(var k in j.Description)
                    WriteLine(ind + "/// <para>" + k + "</para>");
                if(!m.HasStaticArgs)
                {
                    WriteLine(ind + "/// <para>Available parameters:</para>");
                    foreach(var k in m.Params)
                        WriteLine(ind + "/// <para>- <c>{0}</c> {1} ({2})</para>", k.Item2.Replace("<", "&lt;").Replace(">", "&gt;"), k.Item3.Replace("@", ""), k.Item1);
                }
                WriteLine(ind + "/// </summary>");

                if(m.HasStaticArgs)
                    foreach(var k in m.Params.Select(x => Tuple.Create(x.Item1, x.Item3)).Distinct())
                        WriteLine(ind + "/// <param name=\"{0}\">{1}.</param>", k.Item2.Replace("@", ""), k.Item1);
                else WriteLine(ind + "/// <param name=\"parameters\">The parameters.</param>");
                if(m.Definition.Contains("EnumerateMode mode"))
                    WriteLine(ind + "/// <param name=\"mode\">Specify whether enumerating goes to the next page or the previous.</param>");
                WriteLine(ind + "/// <returns>{0}</returns>", j.Returns);

                foreach(var a in j.Attributes)
                    WriteLine(ind + "[{0}(\"{1}\")]", a.Item1, a.Item2);
                WriteLine(ind + m.Definition);
                WriteLine(ind + "{");
                ind.Inc();
                foreach (var l in m.Body)
                    WriteLine(ind + l);
                ind.Dec();
                WriteLine(ind + "}");

                WriteLine("");
            }

            WriteLine(ind + "#endif");
            WriteLine(ind + "#if !NET35");
            WriteLine("");

            foreach(var m in j.MethodsAsync)
            {
                WriteLine(ind + "/// <summary>");
                foreach(var k in j.Description)
                    WriteLine(ind + "/// <para>" + k + "</para>");
                if(!m.HasStaticArgs)
                {
                    WriteLine(ind + "/// <para>Available parameters:</para>");
                    foreach(var k in m.Params)
                        WriteLine(ind + "/// <para>- <c>{0}</c> {1} ({2})</para>", k.Item2.Replace("<", "&lt;").Replace(">", "&gt;"), k.Item3.Replace("@", ""), k.Item1);
                }
                WriteLine(ind + "/// </summary>");

                if(m.HasStaticArgs)
                    foreach(var k in m.Params.Select(x => Tuple.Create(x.Item1, x.Item3)).Distinct())
                        WriteLine(ind + "/// <param name=\"{0}\">{1}.</param>", k.Item2.Replace("@", ""), k.Item1);
                else WriteLine(ind + "/// <param name=\"parameters\">The parameters.</param>");
                if(m.TakesCancellationToken)
                    WriteLine(ind + "/// <param name=\"cancellationToken\">The cancellation token.</param>");
                WriteLine(ind + "/// <returns>{0}</returns>", j.Returns);

                WriteLine(ind + m.Definition);
                WriteLine(ind + "{");
                ind.Inc();
                foreach (var l in m.Body)
                    WriteLine(ind + l);
                ind.Dec();
                WriteLine(ind + "}");

                WriteLine("");
            }
            WriteLine(ind + "#endif");
            WriteLine("");
        }
        ind.Dec();
        WriteLine(ind + "}");
    }
#>
}
